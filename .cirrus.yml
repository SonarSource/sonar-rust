env:
  CIRRUS_CLONE_DEPTH: "20"
  CIRRUS_SHELL: bash

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_USER: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]

  # set GRADLE_USER_HOME to the working directory
  GRADLE_USER_HOME: ${CIRRUS_WORKING_DIR}/.gradle

eks_container_definition: &CONTAINER_DEFINITION
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: c6i.xlarge
  builder_timeout: 120m
  dockerfile: .cirrus/rust.Dockerfile
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}

setup_gradle_cache_template: &SETUP_GRADLE_CACHE
  gradle_cache:
    folder: .gradle
    fingerprint_script: find -type f \( -name "*.gradle*" -or -name "gradle*.properties" \) | sort | xargs cat
    populate_script: mkdir -p ${GRADLE_USER_HOME}/caches

cleanup_gradle_cache_script_template: &CLEANUP_GRADLE_CACHE_SCRIPT
  cleanup_gradle_script: |
    rm -rf "${GRADLE_USER_HOME}/caches/8.*/"
    rm -rf "${GRADLE_USER_HOME}"/daemon/
    rm -rf "${GRADLE_USER_HOME}"/caches/transforms-*
    rm -rf "${GRADLE_USER_HOME}"/caches/journal-*
    rm -rf "${GRADLE_USER_HOME}"/workers
    rm -rf "${GRADLE_USER_HOME}"/.tmp
    /usr/bin/find "${GRADLE_USER_HOME}"/caches/ -name "*.lock" -type f -delete || true

orchestrator_cache_preparation_definition: &ORCHESTRATOR_CACHE
  set_orchestrator_home_script: |
    export TODAY=$(date '+%Y-%m-%d')
    echo "TODAY=${TODAY}" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${TODAY}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${TODAY}
    reupload_on_changes: 'true'

# copy&paste from https://github.com/SonarSource/sonar-cpp/blob/a8c6f1e45a12393508682a013ac7ee35eb92bece/.cirrus.yml#L45
win_ssd_and_clone: &WIN_SSD_AND_CLONE
  prepare_disk_script:
    - ps: |
        Get-Disk -Number 2 | Initialize-Disk -PassThru | New-Partition -UseMaximumSize -DriveLetter Z
        Format-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false
    - echo "CIRRUS_WORKING_DIR=Z:/cirrus-ci-build" >> $CIRRUS_ENV
  # we don't clone submodules because they are not needed for the tests
  clone_script: |
    git config --system core.longpaths true
    if [ -z "$CIRRUS_PR" ]; then
      git clone --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi

build_task:
  depends_on:
    - macos_arm64
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 16G
  <<: *SETUP_GRADLE_CACHE
  env:
    # analysis on Next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: VAULT[development/kv/data/next data.url]

    # required to sign artifacts generated at build time and detect tampering in the follow-up pipelines,
    # see https://xtranet-sonarsource.atlassian.net/wiki/x/DwAIY
    ORG_GRADLE_PROJECT_signingKey: VAULT[development/kv/data/sign data.key]
    ORG_GRADLE_PROJECT_signingPassword: VAULT[development/kv/data/sign data.passphrase]
    ORG_GRADLE_PROJECT_signingKeyId: VAULT[development/kv/data/sign data.key_id]

    ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa
    ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
    ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
    DEPLOY_PULL_REQUEST: "true"
  download_script:
    - >
      if [[ $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH == "dogfood-on-peach" || $CIRRUS_BRANCH =~ ^branch-.* ]]; then
        mkdir -p "analyzer/target/aarch64-apple-darwin/release"
        curl -o "analyzer/target/aarch64-apple-darwin/release/analyzer.xz" http://${CIRRUS_HTTP_CACHE_HOST}/build/${CIRRUS_BUILD_ID}/aarch64-apple-darwin
        mkdir -p "analyzer/target/x86_64-apple-darwin/release"
        curl -o "analyzer/target/x86_64-apple-darwin/release/analyzer.xz" http://${CIRRUS_HTTP_CACHE_HOST}/build/${CIRRUS_BUILD_ID}/x86_64-apple-darwin
      fi
  build_script:
    - source cirrus-env BUILD-PRIVATE
    - source .cirrus/use-gradle-wrapper.sh
    - source regular_gradle_build_deploy_analyze --info --stacktrace
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

macos_arm64_task:
  skip: $CIRRUS_BRANCH != "master" && $CIRRUS_BRANCH != "dogfood-on-peach" && $CIRRUS_BRANCH !=~ "branch-.*"
  persistent_worker:
    resources:
      tart-vms: 1
    labels:
      envname: prod
    isolation:
      tart:
        image: ghcr.io/cirruslabs/macos-sonoma-xcode:latest
        cpu: 4
        memory: 8G
  gradle_cache:
    folder: ".gradle"
  install_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - . $HOME/.cargo/env
    - rustup target add x86_64-apple-darwin
  build_script:
    - echo "org.gradle.daemon=false" >> "gradle.properties"
    - echo "org.gradle.vfs.watch=false" >> "gradle.properties"
    - . $HOME/.cargo/env
    - ./gradlew :analyzer:compileRustDarwin :analyzer:compileRustDarwinX86 --info --stacktrace
  upload_script:
    - curl -X POST --data-binary @analyzer/target/aarch64-apple-darwin/release/analyzer.xz http://${CIRRUS_HTTP_CACHE_HOST}/build/${CIRRUS_BUILD_ID}/aarch64-apple-darwin
    - curl -X POST --data-binary @analyzer/target/x86_64-apple-darwin/release/analyzer.xz http://${CIRRUS_HTTP_CACHE_HOST}/build/${CIRRUS_BUILD_ID}/x86_64-apple-darwin
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

e2e_task:
  depends_on:
    - build
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 16G
  <<: *SETUP_GRADLE_CACHE
  <<: *ORCHESTRATOR_CACHE
  script:
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - ./gradlew :e2e:test -Pe2e -DpluginVersion=${PROJECT_VERSION} --info --stacktrace
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

e2e_win_task:
  depends_on:
    - build
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    platform: windows
    image: base-windows-jdk17-v*
    type: c6id.xlarge
    region: eu-central-1
    use_ssd: true
  <<: *WIN_SSD_AND_CLONE
  <<: *ORCHESTRATOR_CACHE
  env:
    GRADLE_USER_HOME: Z:/cirrus-ci-build/.gradle
  gradle_cache:
    folder: "${GRADLE_USER_HOME}/caches"
  install_rust_script:
    - curl -O https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
    - ./rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable --profile minimal
    - export PATH=$PATH:$HOME/.cargo/bin
    - rustup component add clippy
  e2e_script:
    - echo "org.gradle.daemon=false" >> "gradle.properties"
    - export PATH=$PATH:$HOME/.cargo/bin
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - ./gradlew :e2e:test -Pe2e -DpluginVersion=${PROJECT_VERSION} --info --stacktrace
  cleanup_orchestrator_cache_script:
    - /usr/bin/find ${CIRRUS_WORKING_DIR}/orchestrator -name "sonar-rust-plugin*" -type f -delete
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT
  always:
    report_artifacts:
      path: "e2e/build/reports/tests/**"

e2e_linux_arm64_task:
  depends_on:
    - build
  eks_container:
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    region: eu-central-1
    namespace: default
    cpu: 4
    memory: 8G
    nodeSelectorTerms:
      - matchExpressions:
          - key: kubernetes.io/arch
            operator: In
            values:
              - arm64
    architecture: arm64
    builder_role: cirrus-builder
    builder_image: docker-builder-arm64-v*
    builder_instance_type: t4g.xlarge
    dockerfile: .cirrus/arm64.Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  gradle_cache:
    folder: "${GRADLE_USER_HOME}/caches"
  <<: *ORCHESTRATOR_CACHE
  e2e_script:
    - echo "org.gradle.daemon=false" >> "gradle.properties"
    - export PATH=$PATH:$HOME/.cargo/bin
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source .cirrus/custom_set_gradle_build_version.sh
    - ./gradlew :e2e:test -Pe2e -DpluginVersion=${PROJECT_VERSION} --info --stacktrace
  cleanup_orchestrator_cache_script:
    - /usr/bin/find ${CIRRUS_WORKING_DIR}/orchestrator -name "sonar-rust-plugin*" -type f -delete
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT
  always:
    report_artifacts:
      path: "e2e/build/reports/tests/**"

mend_scan_task:
  depends_on:
    - build
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 16G
  <<: *SETUP_GRADLE_CACHE
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  mend_script:
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - source ws_scan.sh
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT
  allow_failures: "true"
  always:
    ws_scan_artifacts:
      path: "whitesource/**/*"

promote_task:
  only_if: $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH == "dogfood-on-peach" || $CIRRUS_BRANCH =~ "branch-.*"
  depends_on:
    - build
    - e2e
    - e2e_win
    - e2e_linux_arm64
    - mend_scan
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 1G
  <<: *SETUP_GRADLE_CACHE
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  script:
    - source .cirrus/use-gradle-wrapper.sh
    - cirrus_promote_gradle
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT
