env:
  CIRRUS_CLONE_DEPTH: "20"
  CIRRUS_SHELL: bash

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_USER: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]

  # set GRADLE_USER_HOME to the working directory
  GRADLE_USER_HOME: ${CIRRUS_WORKING_DIR}/.gradle

eks_container_definition: &CONTAINER_DEFINITION
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t2.small
  dockerfile: .cirrus/rust.Dockerfile
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}

setup_gradle_cache_template: &SETUP_GRADLE_CACHE
  gradle_cache:
    folder: .gradle
    fingerprint_script: find -type f \( -name "*.gradle*" -or -name "gradle*.properties" \) | sort | xargs cat
    populate_script: mkdir -p ${GRADLE_USER_HOME}/caches

cleanup_gradle_cache_script_template: &CLEANUP_GRADLE_CACHE_SCRIPT
  cleanup_gradle_script: |
    rm -rf "${GRADLE_USER_HOME}/caches/8.*/"
    rm -rf "${GRADLE_USER_HOME}"/daemon/
    rm -rf "${GRADLE_USER_HOME}"/caches/transforms-*
    rm -rf "${GRADLE_USER_HOME}"/caches/journal-*
    rm -rf "${GRADLE_USER_HOME}"/workers
    rm -rf "${GRADLE_USER_HOME}"/.tmp
    /usr/bin/find "${GRADLE_USER_HOME}"/caches/ -name "*.lock" -type f -delete

# copy&paste from https://github.com/SonarSource/sonar-cpp/blob/a8c6f1e45a12393508682a013ac7ee35eb92bece/.cirrus.yml#L45
win_ssd_and_clone: &WIN_SSD_AND_CLONE
  prepare_disk_script:
    - ps: |
        Get-Disk -Number 2 | Initialize-Disk -PassThru | New-Partition -UseMaximumSize -DriveLetter Z
        Format-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false
    - echo "CIRRUS_WORKING_DIR=Z:/cirrus-ci-build" >> $CIRRUS_ENV
  # we don't clone submodules because they are not needed for the tests
  clone_script: |
    git config --system core.longpaths true
    if [ -z "$CIRRUS_PR" ]; then
      git clone --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi

build_task:
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 16G
  <<: *SETUP_GRADLE_CACHE
  env:
    # analysis on Next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: VAULT[development/kv/data/next data.url]

    # required to sign artifacts generated at build time and detect tampering in the follow-up pipelines,
    # see https://xtranet-sonarsource.atlassian.net/wiki/x/DwAIY
    ORG_GRADLE_PROJECT_signingKey: VAULT[development/kv/data/sign data.key]
    ORG_GRADLE_PROJECT_signingPassword: VAULT[development/kv/data/sign data.passphrase]
    ORG_GRADLE_PROJECT_signingKeyId: VAULT[development/kv/data/sign data.key_id]

    ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa
    ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
    ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
    DEPLOY_PULL_REQUEST: "true"
  build_script:
    - source cirrus-env BUILD-PRIVATE
    - source .cirrus/use-gradle-wrapper.sh
    - source regular_gradle_build_deploy_analyze --info --stacktrace
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

e2e_task:
  depends_on:
    - build
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 16G
  <<: *SETUP_GRADLE_CACHE
  script:
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - ./gradlew :e2e:test -Pe2e -DpluginVersion=${PROJECT_VERSION}
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

e2e_win_task:
  depends_on:
    - build
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    platform: windows
    image: base-windows-jdk17-v*
    type: c6id.4xlarge
    region: eu-central-1
    use_ssd: true
  <<: *WIN_SSD_AND_CLONE
  install_rust_script:
    - curl -O https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
    - ./rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable --profile minimal
    - export PATH=$PATH:$HOME/.cargo/bin
    - rustup component add clippy
  e2e_script:
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - ./gradlew :e2e:test -Pe2e -DpluginVersion=${PROJECT_VERSION} --info --stacktrace

promote_task:
  only_if: $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH == "dogfood-on-peach" || $CIRRUS_BRANCH =~ "branch-.*"
  depends_on:
    - build
    - e2e
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 1G
  <<: *SETUP_GRADLE_CACHE
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  script:
    - source .cirrus/use-gradle-wrapper.sh
    - cirrus_promote_gradle
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT
