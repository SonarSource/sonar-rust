[
  {
    "lintId": "clippy::never_loop",
    "ruleKey": null,
    "message": "Refactor the loop to perform useful iterations or remove it entirely."
  },
  {
    "lintId": "clippy::iter_next_loop",
    "ruleKey": "S7455",
    "message": "Remove or replace the loop over the result of this `next()` call."
  },
  {
    "lintId": "clippy::match_str_case_mismatch",
    "ruleKey": "S7428",
    "message": "Refactor this `match` so that all arms compare strings in consistent casing."
  },
  {
    "lintId": "clippy::cast_slice_different_sizes",
    "ruleKey": "S7433",
    "message": "Replace this potentially incorrect cast with a safe alternative."
  },
  {
    "lintId": "clippy::lint_groups_priority",
    "ruleKey": null,
    "message": "Use `priority` field in the `[lints]` table in `Cargo.toml` to override a group of lints. The priority field ensures the correct order of linting."
  },
  {
    "lintId": "clippy::self_assignment",
    "ruleKey": "S1656",
    "message": "Remove or correct this useless self-assignment."
  },
  {
    "lintId": "clippy::modulo_one",
    "ruleKey": "S7451",
    "message": "Refactor the code to remove the `% 1` or `% -1` operation."
  },
  {
    "lintId": "clippy::erasing_op",
    "ruleKey": null,
    "message": "Replace `x * 0`, `0 / x`, or `x & 0` with a direct constant value."
  },
  {
    "lintId": "clippy::eq_op",
    "ruleKey": "S1764",
    "message": "Correct expressions where identical variables are used on both sides of a binary operator."
  },
  {
    "lintId": "clippy::impossible_comparisons",
    "ruleKey": "S7439",
    "message": "Refactor or remove this comparison that always evaluates to false."
  },
  {
    "lintId": "clippy::ineffective_bit_mask",
    "ruleKey": null,
    "message": "Remove bit masks in comparisons which do not change the outcome."
  },
  {
    "lintId": "clippy::bad_bit_mask",
    "ruleKey": "S7438",
    "message": "Correct this bit mask to ensure the comparison does not always yield the same result."
  },
  {
    "lintId": "clippy::absurd_extreme_comparisons",
    "ruleKey": "S2198",
    "message": "Remove the unnecessary comparison or correct the logic to use an appropriate check."
  },
  {
    "lintId": "clippy::deprecated_semver",
    "ruleKey": null,
    "message": "Use a valid semantic version for the 'since' field, or \"TBD\" for future deprecation."
  },
  {
    "lintId": "clippy::iter_skip_zero",
    "ruleKey": "S7456",
    "message": "Remove `.skip(0)` from the iterator or change it to `.skip(1)` if the intention is to skip the first element."
  },
  {
    "lintId": "clippy::vec_resize_to_zero",
    "ruleKey": "S7200",
    "message": "Replace `Vec::resize(0, value)` with `Vec::clear()`, or swap the `Vec::resize` arguments."
  },
  {
    "lintId": "clippy::iterator_step_by_zero",
    "ruleKey": "S7457",
    "message": "Correct the step value in this `.step_by(0)` call."
  },
  {
    "lintId": "clippy::mistyped_literal_suffixes",
    "ruleKey": null,
    "message": "Correct the mistyped literal suffix to avoid potential typos."
  },
  {
    "lintId": "clippy::approx_constant",
    "ruleKey": "S6164",
    "message": "Replace approximate floating-point literals with their corresponding predefined constants from the standard library."
  },
  {
    "lintId": "clippy::min_max",
    "ruleKey": "S6913",
    "message": "Correct the order of min and max functions to avoid unintended constant results."
  },
  {
    "lintId": "clippy::serde_api_misuse",
    "ruleKey": null,
    "message": "Implement all required `Visitor` methods to avoid API misuse."
  },
  {
    "lintId": "clippy::let_underscore_lock",
    "ruleKey": "S7450",
    "message": "Refactor this code to not drop the lock guard immediately after acquiring it."
  },
  {
    "lintId": "clippy::redundant_locals",
    "ruleKey": null,
    "message": "Remove redundant redefinitions of local variables to improve code clarity and avoid potential issues."
  },
  {
    "lintId": "clippy::ifs_same_cond",
    "ruleKey": "S1862",
    "message": "Eliminate or alter consecutive `if` statements that share the same condition to prevent potential copy-paste errors."
  },
  {
    "lintId": "clippy::infinite_iter",
    "ruleKey": null,
    "message": "Ensure that iterations are finite or account for infinite iteration in the intended logic."
  },
  {
    "lintId": "clippy::invalid_null_ptr_usage",
    "ruleKey": null,
    "message": "Use `NonNull::dangling().as_ptr()` instead of `ptr::null()` to prevent undefined behavior."
  },
  {
    "lintId": "clippy::mut_from_ref",
    "ruleKey": null,
    "message": "Avoid returning mutable references (`&mut T`) from immutable references (`&T`), or ensure the function does not contain unsafe code allowing this transformation."
  },
  {
    "lintId": "clippy::inline_fn_without_body",
    "ruleKey": "S7449",
    "message": "Remove the `#[inline]` attribute from this trait method; it has no effect."
  },
  {
    "lintId": "clippy::invalid_regex",
    "ruleKey": "S5856",
    "message": "Correct the regex pattern to ensure it compiles without errors."
  },
  {
    "lintId": "clippy::out_of_bounds_indexing",
    "ruleKey": "S6466",
    "message": "Accessing an array with an out-of-bounds index will cause a runtime panic."
  },
  {
    "lintId": "clippy::invisible_characters",
    "ruleKey": null,
    "message": "Remove invisible Unicode characters from the code."
  },
  {
    "lintId": "clippy::async_yields_async",
    "ruleKey": "S7413",
    "message": "Add `.await` to the returned future within the async context."
  },
  {
    "lintId": "clippy::mem_replace_with_uninit",
    "ruleKey": null,
    "message": "Replace `mem::replace(&mut _, mem::uninitialized())` or `mem::replace(&mut _, mem::zeroed())` with a safer alternative to avoid undefined behavior."
  },
  {
    "lintId": "clippy::overly_complex_bool_expr",
    "ruleKey": "S2589",
    "message": "Simplify this boolean expression and eliminate unnecessary terminals."
  },
  {
    "lintId": "clippy::enum_clike_unportable_variant",
    "ruleKey": "S7426",
    "message": "Replace this `repr(isize/usize)` with a portable type."
  },
  {
    "lintId": "clippy::inverted_saturating_sub",
    "ruleKey": null,
    "message": "Substitute the conditional subtraction with `saturating_sub`."
  },
  {
    "lintId": "clippy::almost_swapped",
    "ruleKey": "S7437",
    "message": "Use `std::mem::swap(&mut var1, &mut var2)` instead of `var1 = var2; var2 = var1;`."
  },
  {
    "lintId": "clippy::if_let_mutex",
    "ruleKey": null,
    "message": "Refactor the code to ensure `Mutex::lock` is not called within an `if let` and also in the `else` block to avoid holding the lock for the entire `if let ... else` block."
  },
  {
    "lintId": "clippy::possible_missing_comma",
    "ruleKey": "S3723",
    "message": "Ensure that array elements are separated by commas, especially when they contain binary operator expressions."
  },
  {
    "lintId": "clippy::inherent_to_string_shadow_display",
    "ruleKey": "S7458",
    "message": "Remove this `to_string` function as it will shadow the `Display` trait implementation."
  },
  {
    "lintId": "clippy::eager_transmute",
    "ruleKey": "S7443",
    "message": "Make sure that this call to `std::mem::transmute` is lazily evaluated."
  },
  {
    "lintId": "clippy::derive_ord_xor_partial_ord",
    "ruleKey": "S7417",
    "message": "Replace manual `PartialOrd` and `Ord` implementations with either entirely derived or entirely manual implementations."
  },
  {
    "lintId": "clippy::derived_hash_with_manual_eq",
    "ruleKey": "S7424",
    "message": "Replace this manually implemented `PartialEq` with the derived implementation."
  },
  {
    "lintId": "clippy::no_effect",
    "ruleKey": "S905",
    "message": "Remove or correct this statement, as it has no effect."
  },
  {
    "lintId": "clippy::too_many_arguments",
    "ruleKey": "S107",
    "message": "Refactor the function to reduce the number of parameters."
  },
  {
    "lintId": "clippy::zero_ptr",
    "ruleKey": "S4962",
    "message": "Use `ptr::null()` instead of `0 as` to cast to a null pointer."
  },
  {
    "lintId": "clippy::redundant_closure_for_method_calls",
    "ruleKey": "S1612",
    "message": "Replace this closure with a method reference."
  },
  {
    "lintId": "clippy::string_to_string",
    "ruleKey": "S1858",
    "message": "Remove the redundant `to_string()` call, or clone the string."
  },
  {
    "lintId": "clippy::unnecessary_cast",
    "ruleKey": "S4325",
    "message": "Remove this unnecessary cast."
  },
  {
    "lintId": "clippy::redundant_field_names",
    "ruleKey": "S3498",
    "message": "Use the field init shorthand syntax."
  },
  {
    "lintId": "clippy::unnecessary_semicolon",
    "ruleKey": "S1116",
    "message": "Remove this semicolon."
  },
  {
    "lintId": "clippy::let_and_return",
    "ruleKey": "S1488",
    "message": "Remove the `let` statement and return the expression directly."
  },
  {
    "lintId": "clippy::match_bool",
    "ruleKey": "S920",
    "message": "Replace this `match` expression with an `if-else` expression."
  },
  {
    "lintId": "clippy::misnamed_getter",
    "ruleKey": "S4275",
    "message": "Access the expected field of the getter."
  },
  {
    "lintId": "clippy::print_stdout",
    "ruleKey": "S106",
    "message": "Use a logging framework to log this message to the console."
  },
  {
    "lintId": "clippy::while_float",
    "ruleKey": "S2193",
    "message": "Avoid using floating-point numbers as loop counters."
  },
  {
    "lintId": "clippy::vec_init_then_push",
    "ruleKey": "S7089",
    "message": "Use a vector literal to initialize the vector."
  },
  {
    "lintId": "clippy::unreadable_literal",
    "ruleKey": "S2148",
    "message": "Use underscore delimiters to make the literal easier to read."
  },
  {
    "lintId": "clippy::wildcard_imports",
    "ruleKey": "S2208",
    "message": "Replace this wildcard import with specific imports."
  },
  {
    "lintId": "clippy::branches_sharing_code",
    "ruleKey": "S7411",
    "message": "Refactor the code to avoid duplicating logic in multiple branches."
  },
  {
    "lintId": "clippy::else_if_without_else",
    "ruleKey": "S126",
    "message": "Add an `else` block to this `if`-`else if` chain."
  },
  {
    "lintId": "clippy::zst_offset",
    "ruleKey": "S7412",
    "message": "Remove the use of `offset` or `wrapping_add`/`wrapping_sub` on pointers to zero-sized types."
  },
  {
    "lintId": "clippy::wrong_transmute",
    "ruleKey": "S7414",
    "message": "Remove or correct this transmute operation."
  },
  {
    "lintId": "clippy::while_immutable_condition",
    "ruleKey": "S7415",
    "message": "Ensure that variables within the while condition are mutated in the body of the loop."
  },
  {
    "lintId": "clippy::useless_attribute",
    "ruleKey": "S7418",
    "message": "Remove this useless lint attribute, or place it on the imported items themselves."
  },
  {
    "lintId": "clippy::unused_io_amount",
    "ruleKey": "S7419",
    "message": "Process the entire buffer with `write_all(&buffer)` or `read_exact(&buffer)`."
  },
  {
    "lintId": "clippy::unsound_collection_transmute",
    "ruleKey": "S7420",
    "message": "Do not transmute collections of different types; use iteration and mapping instead."
  },
  {
    "lintId": "clippy::unit_return_expecting_ord",
    "ruleKey": "S7421",
    "message": "Ensure the closure properly returns an `Ord` type or remove any extraneous semi-colons."
  },
  {
    "lintId": "clippy::unit_hash",
    "ruleKey": "S7422",
    "message": "Replace `().hash(_)` with `0_u8.hash(_)` to yield a meaningful hash value."
  },
  {
    "lintId": "clippy::unit_cmp",
    "ruleKey": "S7423",
    "message": "Remove comparisons and asserts involving the unit type `()`."
  },
  {
    "lintId": "clippy::uninit_assumed_init",
    "ruleKey": "S7425",
    "message": "Prevent undefined behavior by not using `MaybeUninit::uninit().assume_init()`."
  },
  {
    "lintId": "clippy::transmuting_null",
    "ruleKey": "S7427",
    "message": "Use `Option` to represent a nullable reference"
  },
  {
    "lintId": "clippy::transmute_null_to_fn",
    "ruleKey": "S7429",
    "message": "Use `Option<fn()>` to safely represent a nullable function pointer."
  },
  {
    "lintId": "clippy::suspicious_splitn",
    "ruleKey": "S7430",
    "message": "Use `splitn` with at least two splits."
  },
  {
    "lintId": "clippy::size_of_in_element_count",
    "ruleKey": "S7431",
    "message": "Use the element count directly instead of `size_of::<T>`."
  },
  {
    "lintId": "clippy::reversed_empty_ranges",
    "ruleKey": "S7432",
    "message": "Invert the start and end values of the range, and reverse it with `.rev()`."
  },
  {
    "lintId": "clippy::redundant_comparisons",
    "ruleKey": "S7436",
    "message": "Remove this redundant comparison, or correct the intended comparison logic."
  },
  {
    "lintId": "clippy::recursive_format_impl",
    "ruleKey": "S7440",
    "message": "Refactor this formatting implementation to avoid infinite recursion."
  },
  {
    "lintId": "clippy::read_line_without_trim",
    "ruleKey": "S7441",
    "message": "Always trim the trailing newline when using `Stdin::read_line`."
  },
  {
    "lintId": "clippy::panicking_unwrap",
    "ruleKey": "S7442",
    "message": "Avoid using `unwrap()` in conditions that will always cause a panic. Use explicit `panic!()` if panicking is intended."
  },
  {
    "lintId": "clippy::panicking_overflow_checks",
    "ruleKey": "S7444",
    "message": "Use safe methods like `checked_add` or `overflowing_add` instead of C-style overflow checks."
  },
  {
    "lintId": "clippy::option_env_unwrap",
    "ruleKey": "S7445",
    "message": "Use `env!(...)` to ensure compile-time checking of the environment variable."
  },
  {
    "lintId": "clippy::not_unsafe_ptr_arg_deref",
    "ruleKey": "S7446",
    "message": "Mark this function as `unsafe` to indicate that it dereferences raw pointer arguments."
  },
  {
    "lintId": "clippy::nonsensical_open_options",
    "ruleKey": "S7447",
    "message": "Ensure that these file open options are consistent and do not conflict with each other."
  },
  {
    "lintId": "clippy::non_octal_unix_permissions",
    "ruleKey": "S7448",
    "message": "Use octal values to set Unix file permissions."
  }
]
